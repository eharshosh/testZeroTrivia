{"version":3,"file":"parser.js","sourceRoot":"","sources":["parser.ts"],"names":[],"mappings":";;AAIA,MAAa,sBAAsB;IAC/B,KAAK,CAAC,SAAmB;QACrB,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,KAAK,IAAI,YAAY,IAAI,SAAS,EAAE;YAChC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC;SACnE;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,MAAM,CAAC,aAAa,CAAC,YAAY;QACrC,MAAM,CAAC,kBAAkB,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACxE,MAAM,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvF,OAAO;YACH,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;YACjB,cAAc;YACd,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC;SAC3F,CAAC;IACN,CAAC;IAEO,MAAM,CAAC,mBAAmB,CAAC,UAAkB;QACjD,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAC/C,IAAI,KAAK,EAAE;YACP,oCAAoC;YACpC,MAAM,CAAC,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,GAAG,KAAK,CAAC;YACtC,OAAO;gBACH,SAAS,EAAE,YAAY,KAAK,GAAG;gBAC/B,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;aACpB,CAAA;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AA/BD,wDA+BC","sourcesContent":["import {Question} from \"../models/question\";\nimport {QuestionOption} from \"../models/questionOption\";\nimport {IQuestionsParser} from \"../IQuestionsParser\";\n\nexport class defaultQuestionsParser implements IQuestionsParser {\n    parse(questions: string[]): Question[] {\n        const result = [];\n        for (let questionText of questions) {\n            result.push(defaultQuestionsParser.parseQuestion(questionText));\n        }\n        return result;\n    }\n\n    private static parseQuestion(questionText) : Question {\n        const [questionNumberLine, text, ...options] = questionText.split('\\n');\n        const questionNumber = Number.parseInt(questionNumberLine.match(/שאלה מספר (\\d+)/)[1]);\n        return {\n            text: text.trim(),\n            questionNumber,\n            options: options.map(defaultQuestionsParser.parseQuestionOption).filter(o => o !== null)\n        };\n    }\n\n    private static parseQuestionOption(optionText: string) : QuestionOption {\n        const match = optionText.match(/(\\d+)\\. (.*)/);\n        if (match) {\n            // noinspection JSUnusedLocalSymbols\n            const [_, optionNumber, text] = match;\n            return {\n                isCorrect: optionNumber === '1',\n                text: text.trim()\n            }\n        }\n        return null;\n    }\n}\n"]}